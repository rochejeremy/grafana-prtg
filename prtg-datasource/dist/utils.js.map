{"version":3,"sources":["../src/utils.js"],"names":["isRegex","str","regexPattern","test","isNumeric","strValue","isNaN","parseFloat","isFinite","isTemplateVariable","match","pad","idx","val","slice","buildRegex","matches","pattern","flags","undefined","RegExp","escapeRegex","value","replace","filterMatch","findItem","filterStr","invert","result","rex"],"mappings":";;;;;;AASO,WAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAC3B,WAAOC,aAAaC,IAAb,CAAkBF,GAAlB,CAAP;AACD;;AAED;;qBAJgBD,O;;AAKT,WAASI,SAAT,CAAmBC,QAAnB,EAA6B;AAClC,WAAO,CAACC,MAAMC,WAAWF,QAAX,CAAN,CAAD,IAAgCG,SAASH,QAAT,CAAvC;AACD;;uBAFeD,S;;AAIT,WAASK,kBAAT,CAA4BR,GAA5B,EAAiC;AACtC,QAAIA,OAAOA,IAAIS,KAAJ,CAAU,OAAV,CAAX,EAA+B;AAC7B,aAAO,IAAP;AACD;AACD,WAAO,KAAP;AACD;;AAED;;;;gCAPgBD,kB;;AAUT,WAASE,GAAT,CAAaC,GAAb,EAAkBC,GAAlB,EAAuB;AAC5B,QAAIA,GAAJ,EAAS,OAAO,CAAC,OAAOD,MAAM,CAAb,CAAD,EAAkBE,KAAlB,CAAwB,CAAC,CAAzB,CAAP;AACT,WAAO,CAAC,MAAMF,GAAP,EAAYE,KAAZ,CAAkB,CAAC,CAAnB,CAAP;AACD;;iBAHeH,G;;AAKT,WAASI,UAAT,CAAoBd,GAApB,EAAyB;AAC9B,QAAMe,UAAUf,IAAIS,KAAJ,CAAUR,YAAV,CAAhB;AACA,QAAMe,UAAUD,QAAQ,CAAR,CAAhB;AACA,QAAME,QAAQF,QAAQ,CAAR,MAAe,EAAf,GAAoBA,QAAQ,CAAR,CAApB,GAAiCG,SAA/C;AACA,WAAO,IAAIC,MAAJ,CAAWH,OAAX,EAAoBC,KAApB,CAAP;AACD;;AAED;AACA;;wBARgBH,U;;AAST,WAASM,WAAT,CAAqBC,KAArB,EAA4B;AACjC,WAAOA,MAAMC,OAAN,CAAc,uBAAd,EAAuC,MAAvC,CAAP;AACD;;yBAFeF,W;;AAIT,WAASG,WAAT,CAAqBC,QAArB,EAA+BC,SAA/B,EAA0D;AAAA,QAAhBC,MAAgB,uEAAP,KAAO;;AAC/D,QAAIC,eAAJ;AACA,QAAI5B,QAAQ0B,SAAR,CAAJ,EAAwB;AACtB,UAAMG,MAAMd,WAAWW,SAAX,CAAZ;AACAE,eAASC,IAAI1B,IAAJ,CAASsB,QAAT,CAAT;AACD,KAHD,MAGO;AACLG,eAASH,aAAaC,SAAtB;AACD;AACD,QAAIC,MAAJ,EAAY;AACV,aAAO,CAACC,MAAR;AACD;AACD,WAAOA,MAAP;AACD;;yBAZeJ,W;;;;;8BAvCHtB,Y,GAAe,qB","file":"utils.js","sourcesContent":["/**\r\n * Global helper functions\r\n * \r\n * mostly copied from alexanderzobnin-zabbix-app - thanks!\r\n */\r\n\r\n// Pattern for testing regex\r\nexport const regexPattern = /^\\/(.*)\\/([gmi]*)$/m;\r\n\r\nexport function isRegex(str) {\r\n  return regexPattern.test(str);\r\n}\r\n\r\n//Thanks StackOverflow \r\nexport function isNumeric(strValue) {\r\n  return !isNaN(parseFloat(strValue)) && isFinite(strValue);\r\n}\r\n\r\nexport function isTemplateVariable(str) {\r\n  if (str && str.match(/\\$\\w+/)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * pad date parts and optionally add one\r\n */\r\nexport function pad(idx, val) {\r\n  if (val) return (\"0\" + (idx + 1)).slice(-2);\r\n  return (\"0\" + idx).slice(-2);\r\n}\r\n\r\nexport function buildRegex(str) {\r\n  const matches = str.match(regexPattern);\r\n  const pattern = matches[1];\r\n  const flags = matches[2] !== \"\" ? matches[2] : undefined;\r\n  return new RegExp(pattern, flags);\r\n}\r\n\r\n// Need for template variables replace\r\n// From Grafana's templateSrv.js\r\nexport function escapeRegex(value) {\r\n  return value.replace(/[\\\\^$*+?.()|[\\]{}\\/]/g, \"\\\\$&\");\r\n}\r\n\r\nexport function filterMatch(findItem, filterStr, invert = false) {\r\n  let result;\r\n  if (isRegex(filterStr)) {\r\n    const rex = buildRegex(filterStr);\r\n    result = rex.test(findItem);\r\n  } else {\r\n    result = findItem === filterStr;\r\n  }\r\n  if (invert) {\r\n    return !result;\r\n  }\r\n  return result;\r\n}\r\n"]}